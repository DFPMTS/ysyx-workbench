import chisel3._
import chisel3.util._
import chisel3.util.experimental._
import chisel3.util.experimental.decode.TruthTable
import chisel3.util.experimental.decode.decoder

class Control extends Bundle {
  val reg_we    = UInt(1.W) // (0,0)
  val op1_sel   = UInt(2.W) // (1,2)
  val op2_sel   = UInt(1.W) // (3,3)
  val op1_U     = UInt(1.W) // (4,4)
  val op2_U     = UInt(1.W) // (5,5)
  val alu_sel   = UInt(4.W) // (6,9)
  val wb_sel    = UInt(2.W) // (10,11)
  val inst_type = UInt(3.W) // (12,14)
  val len       = UInt(2.W) // (15,16)
  val invalid   = UInt(1.W) // (17,17)
  val break     = UInt(1.W) // (18,18)
  val is_beq    = UInt(1.W) // (19,19)
  val is_bne    = UInt(1.W) // (20,20)
  val is_blt    = UInt(1.W) // (21,21)
  val is_bge    = UInt(1.W) // (22,22)
  val cmp_U     = UInt(1.W) // (23,23)
  val is_jump   = UInt(1.W) // (24,24)
  val load_U    = UInt(1.W) // (25,25)
  val mr        = UInt(1.W) // (26,26)
  val mw        = UInt(1.W) // (27,27)
}

class Decode extends Module {
  val io = IO(new Bundle {
    val inst = Input(UInt(32.W))
    val ctl  = Output(new Control)
    val rd   = Output(UInt(5.W))
    val rs1  = Output(UInt(5.W))
    val rs2  = Output(UInt(5.W))
  })

  val lut = List(
    BitPat("b??????? ????? ????? ??? ????? 01101 11") -> BitPat("b110100000000001??00000000000"),
    BitPat("b??????? ????? ????? ??? ????? 00101 11") -> BitPat("b101100000000001??00000000000"),
    BitPat("b??????? ????? ????? ??? ????? 11011 11") -> BitPat("b101100000010100??00000001000"),
    BitPat("b??????? ????? ????? ??? ????? 11001 11") -> BitPat("b100100000010000??00000001000"),
    BitPat("b??????? ????? ????? 000 ????? 11000 11") -> BitPat("b0011000000??011??00100000000"),
    BitPat("b??????? ????? ????? 001 ????? 11000 11") -> BitPat("b0011000000??011??00010000000"),
    BitPat("b??????? ????? ????? 100 ????? 11000 11") -> BitPat("b0011000000??011??00001000000"),
    BitPat("b??????? ????? ????? 101 ????? 11000 11") -> BitPat("b0011000000??011??00000100000"),
    BitPat("b??????? ????? ????? 110 ????? 11000 11") -> BitPat("b0011000000??011??00001010000"),
    BitPat("b??????? ????? ????? 111 ????? 11000 11") -> BitPat("b0011000000??011??00000110000"),
    BitPat("b??????? ????? ????? 000 ????? 00000 11") -> BitPat("b1001000000010000000000000010"),
    BitPat("b??????? ????? ????? 001 ????? 00000 11") -> BitPat("b1001000000010000100000000010"),
    BitPat("b??????? ????? ????? 010 ????? 00000 11") -> BitPat("b1001000000010001000000000010"),
    BitPat("b??????? ????? ????? 100 ????? 00000 11") -> BitPat("b1001000000010000000000000110"),
    BitPat("b??????? ????? ????? 101 ????? 00000 11") -> BitPat("b1001000000010000100000000110"),
    BitPat("b??????? ????? ????? 000 ????? 01000 11") -> BitPat("b0001000000??010??00000000001"),
    BitPat("b??????? ????? ????? 001 ????? 01000 11") -> BitPat("b0001000000??010??00000000001"),
    BitPat("b??????? ????? ????? 010 ????? 01000 11") -> BitPat("b0001000000??010??00000000001"),
    BitPat("b??????? ????? ????? 000 ????? 00100 11") -> BitPat("b100100000000000??00000000000"),
    BitPat("b??????? ????? ????? 010 ????? 00100 11") -> BitPat("b100100010100000??00000000000"),
    BitPat("b??????? ????? ????? 011 ????? 00100 11") -> BitPat("b100111010100000??00000010000"),
    BitPat("b??????? ????? ????? 100 ????? 00100 11") -> BitPat("b100100100000000??00000000000"),
    BitPat("b??????? ????? ????? 110 ????? 00100 11") -> BitPat("b100100011100000??00000000000"),
    BitPat("b??????? ????? ????? 111 ????? 00100 11") -> BitPat("b100100011000000??00000000000"),
    BitPat("b0000000 ????? ????? 001 ????? 00100 11") -> BitPat("b100100001000000??00000000000"),
    BitPat("b0000000 ????? ????? 101 ????? 00100 11") -> BitPat("b100100001100000??00000000000"),
    BitPat("b0100000 ????? ????? 101 ????? 00100 11") -> BitPat("b100100010000000??00000000000"),
    BitPat("b0000000 ????? ????? 000 ????? 01100 11") -> BitPat("b100000000000?????00000000000"),
    BitPat("b0100000 ????? ????? 000 ????? 01100 11") -> BitPat("b100000000100?????00000000000"),
    BitPat("b0000000 ????? ????? 001 ????? 01100 11") -> BitPat("b100000001000?????00000000000"),
    BitPat("b0000000 ????? ????? 010 ????? 01100 11") -> BitPat("b100000010100?????00000000000"),
    BitPat("b0000000 ????? ????? 011 ????? 01100 11") -> BitPat("b100011010100?????00000010000"),
    BitPat("b0000000 ????? ????? 100 ????? 01100 11") -> BitPat("b100000100000?????00000000000"),
    BitPat("b0000000 ????? ????? 101 ????? 01100 11") -> BitPat("b100000001100?????00000000000"),
    BitPat("b0100000 ????? ????? 101 ????? 01100 11") -> BitPat("b100000010000?????00000000000"),
    BitPat("b0000000 ????? ????? 110 ????? 01100 11") -> BitPat("b100000011100?????00000000000"),
    BitPat("b0000000 ????? ????? 111 ????? 01100 11") -> BitPat("b100000011000?????00000000000"),
    BitPat("b0000000 00001 00000 000 00000 11100 11") -> BitPat("b0???00??????000??01000000000"),
    BitPat("b0000001 ????? ????? 000 ????? 01100 11") -> BitPat("b100000100100?????00000000000"),
    BitPat("b0000001 ????? ????? 001 ????? 01100 11") -> BitPat("b100000101000?????00000000000"),
    BitPat("b0000001 ????? ????? 010 ????? 01100 11") -> BitPat("b100001101000?????00000000000"),
    BitPat("b0000001 ????? ????? 011 ????? 01100 11") -> BitPat("b100011101000?????00000000000"),
    BitPat("b0000001 ????? ????? 100 ????? 01100 11") -> BitPat("b100000101100?????00000000000"),
    BitPat("b0000001 ????? ????? 101 ????? 01100 11") -> BitPat("b100011101100?????00000000000"),
    BitPat("b0000001 ????? ????? 110 ????? 01100 11") -> BitPat("b100000110000?????00000000000"),
    BitPat("b0000001 ????? ????? 111 ????? 01100 11") -> BitPat("b100011110000?????00000000000")
  )

  val table = TruthTable(lut, BitPat("b?????????????????1??????????"))
  io.ctl := decoder(io.inst, table).asTypeOf(new Control)
  io.rd  := io.inst(11, 7)
  io.rs1 := io.inst(19, 15)
  io.rs2 := io.inst(24, 20)
}
